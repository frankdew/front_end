<div class="total">
  <div class="js">
    <h1 class="js_title">JS:</h1>
  </div>
  <div class="link_to">
    <%= link_to "Back to Index", root_path, {:style=>'color:#FFFFFF;'}%>
  </div>
  <div class="redirect_google">
    <p class="google">Can't find it...?</p>
    <a class="google_img" href="http://google.com"><img src="http://www.telegraph.co.uk/content/dam/technology/2016/05/09/google_3277450b-large_trans++pJliwavx4coWFCaEkEsb3kvxIt-lGGWCWqwLa_RXJU8.jpg" height="102" style="border-radius: 5px;"/></a>
    <p class="google">Google it !!</p>
  </div>
  <div class="quick_ref">
    <h3 id="link">Quick reference:</h3>
    <ul class="link_list">
      <li><%= link_to "To top", :anchor => "top" %></li>
      <li><%= link_to "Tags & comments", :anchor => "tags" %></li>
      <li><%= link_to "Switch Statement", :anchor => "switch" %></li>
      <li><%= link_to "Loops and Conditionals", :anchor => "loops" %></li>
      <li><%= link_to "Break and Continue", :anchor => "break" %></li>
      <li><%= link_to "Functions", :anchor => "function" %></li>
      <li><%= link_to "Multiple Parameters", :anchor => "multiple" %></li>
      <li><%= link_to "Return Statement", :anchor => "return" %></li>
      <li><%= link_to "Calling function", :anchor => "calling" %></li>
      <li><%= link_to "JS & HTML DOM reference", :anchor => "reference" %></li>
      <li><%= link_to "Alert, Prompt, Confirm", :anchor => "alert" %></li>
    </ul>
  </div>
</div>

<div class="content">
  <br><br>
  <div class="js_head">
    <h1 class="jsheader"><em>&alefsym; Learning about JavaScript &alefsym;</em></h1>
    <img class="js_pic" src="http://cdn.tutorialzine.com/wp-content/uploads/2015/12/javascript.png" height="80" style="border-radius:5px" />
  </div>


  <pre>
    <h3><a id="tags">JS tags & comments</a></h3>
      A 'single line comment' in JS is made like this: //..comment here..
      Multi-line comments start with /* and end with */.
      Any text between /* and */ will be ignored by JavaScript.
  </pre>

  <pre>
    <h3>Examples JS interactivity</h3>
      <button id="demo" onclick="myFunction()">Don't touch me you!!!</button><br/>
      <button id="first" onclick="firstFunction()">You are great!!</button>
  </pre>

  <pre>
    <h3><a id="switch">Switch Statement</a></h3>
      In cases when you need to test for multiple conditions,
      writing "if else" statements for each condition might not be the best solution.
      The Switch statement is used to perform different actions based on different conditions.
        switch(expression){
          case n1:
            statements
            break;
          case n2:
            statements
            break;
          default:
            Statements
        }
      The switch expression is evaluated once. The value of the expression is compared with the values
      of each case if there is a match, the associated block of code is executed.
      Example:
        var day = 2;
        switch(day){
          case 1:
            document.write("Monday");
            break;
          case 2:
            document.write("Tuesday");
            break;
          case 3:
            document.write("Wednesday");
            break;
          default:
            document.write("Another day");
        }

      <em>Outputs: "Tuesday"</em>.
      You can have as many "case statements" as needed.
      When JS code reaches a "break" keyword, it breaks out of the switch block.
      This will stop the execution of more code and case testing inside the block.
      Usualy, a break should be put in each case statement.

      The default keyword specifies te code to run if there is no match.
        default:
          document.write("Another day");
        The default can be omited, if there is no need to handle the case when no match is found.
  </pre>

  <pre>
    <h3><a id="loops">Conditionals and Loops</a></h3>
      <span class="line_alink">For Loop:</span>
      for(statement 1; statement 2; statement 3) {
        code block to be executed
      }

      <em>-Statement 1 is executed before the loop (the code block) starts</em>.
      <em>-Statement 2 defines the condition for running the loop (the code block)</em>.
      <em>-Statement 3 is executed each time after the loop (the code block) has been executed</em>.
      * Example:
      for(i = 1; i <= 5; i++){
        document.write(i + "&lt;br/&gt;");
      }

      in this example,
      <em>Statement 1 sets a variable before the loop starts (var i = 1)</em>.
      <em>Statement 2 defines the condition for the loop to run (i must be less than or equal to 5)</em>.
      <em>Statement 3 increases a value (i++) each time the code block in the loop has been executed</em>.
      You clould leave out Statement 1 if the values are set before the loop starts:
        var i = 1;
        for(;i <=5; i++){
          document.write(i + "&lt;br/&gt;")
        }

      <span class="line_alink">While Loop:</span>
      The while loop repeats through a block of code, as long as a specified condition is true.
      while(condition){
        code block
      }
      * Example:
      var i = 0;
      while(i<=10){
        document.write(i + "&lt;br/&gt;");
        i++
      }
      The loop will continue to run as long as i is less than, or equal to, 10.
      Each time the loop runs , i will be increased by 1.

      <span class="line_alink">Do While Loop:</span>
      The do while loop is a variant of the while loop. This loop will execute the code block once,
      before checking if the condition is true, and then it will repeat the loop as longnas the condition is true.
      do{
        code block
      }
      while(condition);
      * Example:
      vr i = 20;
      do{
        document.write(i +"&lt;br/&gt;");
        i++
      }
      while(i<=25);
      The loop will always be executed once, even if the condition is false, because the code is executed
      before the condition is tested.
  </pre>

  <pre>
    <h3><a id="break">Break and Continue</a></h3>
      <span class="line_alink">Break:</span>
      The break statement 'jumps' out of a loop and continues executing the code after the loop.
      for(i = 0; i <= 10; i++){
        if(i == 5){
          break;
        }
        document.write(i + "&lt;br/&gt;");
      }
      Once i reaches 5, it will break out of the loop.
      <span class="line_alink">Continue:</span>
      The continue statement breaks only one iteration in the loop, and continues with the next iteration.
      for(i = 0; i <=10; i++){
        if(i == 5){
          continue;
        }
        document.write(i + "&lt;br/&gt;");
      }
      The value 5 will not be printed, because 'continue' skips that iteration of the loop.
  </pre>

  <pre>
    <h3><a id="function">Functions</a></h3>
      A JS function is a block of code designed to perform a particular task.
      The main advantage of using functions:
      - Code reuse: Define the code once, and use it many times. Use the same code manytimes with different
      arguments, to produce different results.
      A JS function is executed when "something" invokes or calls it!
      <span class="line_alink">Defining a function:</span>
      To define a JS function, use the function keyword followed by a name, followed by a set of parentheses().
      The code to be executed by the function is placed inside curly brackets{}.
        function name() {
          code to be executed
        }
      For function names the same rules apply as for variables.
      <span class="line_alink">Calling a function:</span>
      To execute the function you need to call it.
      To call a function, start with the name of the function, then follow it with the arguments in parenthases.
      Example:
      function myFunction() {
        alert("Calling a function!");
      }

      myFunction();  => <em>Alerts "Calling a function", always remember to put a semicolon after calling the function</em>.
      Once the function is defined, JS allows you to call it as many times as you want to.
      <span class="line_alink">Function parameters:</span>
      Functions can take parameters. Function parameters are the names listed in the function's definition.
        functionName(param 1, param2, param3) {
          some code
        }
      Parameters should be given names which are seperated by commas within the parentheses.
      After defining the parameters you can use them inside the function.
        function sayHello(name) {
          alert("Hi, " + name);
        }

        sayHello("David");  => <em>Alerts "Hi, David"</em>.
      You can use here many more names which will execute the function's code each time for the provided argument.
  </pre>

  <pre>
    <h3><a id="multiple">Using multiple Parameters with Functions</a></h3>
    You can define multiple parameters for a function by comma-separating them. The Parameters
    are used within the function's definition.
      function myFunc(x,y){
        some code
      }
      Example:
      function apples(one, two) {             => "one, two" here are the "parameters"!
      alert(one + " is better than " + two);
      }

      apples("Pieter", "Johan"); => <em>Pieter is better than Johan</em>. => This is "passing" the information "Pieter", "Johan" in.
      apples("sun", "rain"); => <em>sun is better than rain</em>. => This is "passing" the information "sun", "rain" in.
      * When calling the function, provide the arguments in the same order in which you defined them.
  </pre>

  <pre>
    <h3><a id="return">Return statement</a></h3>
    A function can have an optional return statement. It is used to return a value from the function.
    This statement is useful when making caculations that require a result.
    When JS reaches a return statement, the function stops executing!
      function addNumbers(a, b) {
      var c = a + b;
      return c;
      }

      document.write(addNumbers(20, 19)); => <em>Outputs 39</em>.

    Use return statement to return a value:
        function myFunction(a,b){
          return a * b;
        }

        var x = myFunction(5,6);  => <em>Return value will end up in x, x equals 30</em>.
  </pre>

  <pre>
    <h3><a id="calling">Calling a function from an other function</a></h3>
      You can call functions from within other functions like so:
        function doFirst(){
          document.write(" Me first ");
        }

        function doSecond(){
          document.write(" but Me second ");
        }

        function start(){
          doFirst();
          doSecond();
        }

        start();  => <em>Calling the function 'start'</em>.

      This will give the outcome of: "Me first but Me second"
  </pre>

  <pre>
      <h3><a id="reference">JS and HTML DOM reference</a></h3>
      This <a href="http://www.w3schools.com/jsref/default.asp">link</a> takes you to a complete JavaScript reference documentation.
  </pre>

  <pre>
    <h3><a id="alert">Alert, Prompt, Confirm</a></h3>
      JS offers three types of popup boxes, the Alert, Prompt and Confirm boxes.
      <span class="line_alink">Alert Box:</span>
      An alert box is used when you want to ensure that information gets through to the user.
      When an alert box pops up, the user must click OK to proceed.
      The alert <span class="line_alink">function</span> takes a single parameter, which is text displayed in the popup box.
      Example:
        alert("Do you realy want to leave this page?");
      To display line breaks within a popup box, use a backslash followed by the character n.
      Like so:
        alert("Hello\nHow are you?");

      <span class="line_alink">Prompt Box:</span>
      A prompt box is often used to have the user input a value before entering a page.
      When a prompt box pops up, the user will have to click either OK or Cancel to proceed after entering the input value.
      If the user clicks OK, the box returns the input value. If the user clicks Cancel, the box returns "null".
      The prompt()<span class="line_alink">method</span> takes two parameters.
        - The first is the label, which you want to display in the text box.
        - The second is a default <span class="line_alink">string</span> to display in the text box (optional).
      Example:
        var user = prompt("Please enter your name");
        alert(user);

      <span class="line_alink">Confirm Box:</span>
      A confirm box is often used to have the user verify or accept something.
      When a confirm box pops up, the user must click either OK or Cancel to proceed.
      If the user clicks OK, the box returns true. If the user clicks Cancel, the box returns false.
      Example:
        var result = confirm("Do you realy want to leave this page?");
        if(result == true){
          alert("Thanks for visiting");
        }
        else{
          alert("Thanks for staying with us");
        }
      </pre>
</div>
